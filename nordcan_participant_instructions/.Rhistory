install.packages("/Dataflyt/nordcan/dev/data.table_1.14.7.zip", repos = NULL, type = "win.binary")
p <- "/Dataflyt/nordcan/user/huti/å汉 语æ 言/CO2.csv"
data.table::fwrite(CO2, (p))
data.table::fwrite
dbc::report_is_one_of
install.packages("/Dataflyt/nordcan/dev/dbc_0.4.11.zip", repos = NULL, type = "win.binary")
remove.packages("nordcansurvival", lib="~/R/R-4.0.3/library")
remove.packages("nordcancore", lib="~/R/R-4.0.3/library")
install.packages("P:\\Dataflyt\\nordcan\\dev\\nordcancore_1.3.zip", repos = NULL, type = "win.binary")
install.packages("P:\\Dataflyt\\nordcan\\dev\\nordcansurvival_1.3.zip", repos = NULL, type = "win.binary")
install.packages("P:\\Dataflyt\\nordcan\\dev\\nordcansurvival_1.3.zip", repos = NULL, type = "win.binary")
install.packages("/Dataflyt/nordcan/dev/nordcancore_1.3.zip", repos = NULL, type = "win.binary")
install.packages("/Dataflyt/nordcan/dev/nordcanepistats_1.3.zip", repos = NULL, type = "win.binary")
install.packages("/Dataflyt/nordcan/dev/nordcansurvival_1.3.zip", repos = NULL, type = "win.binary")
path_IARC  <- "C:/Program Files (x86)/IARCcrgTools/IARCcrgTools.EXE"
path_STATA <- "S:/Prog64/STATA/Stata17MP/StataMP-64.exe"
## paths of raw dataset (they are not necessarily have to be in csv format,
## but should have the same names as section(2), 123-126):
file_incidence  <- "p:/Dataflyt/nordcan/data/2020/incidence_2020.csv"
file_lifetable  <- "p:/Dataflyt/nordcan/data/2020/national_population_life_table_2020.csv"
file_population <- "p:/Dataflyt/nordcan/data/2020/population_2020.csv"
file_mortality  <- "p:/Dataflyt/nordcan/data/2020/mortality_2020.csv"
## population projection data (if there is no such file, just leave it as it is).
file_pop_proj   <- "path/to/general_population_projection_dataset.csv"
## directory for saving the output of NORDCAN processing.
dir_result <- "p:/Dataflyt/nordcan/user/huti/20 20/"
## directory for holding the archived (.zip) result.
dir_archive <- "p:/Dataflyt/nordcan/user/huti/20 20"
## path of previous archived result to compared with.
stats_archived <- "p:/Dataflyt/nordcan/archive/nordcan_9.1_statistics_tables.zip"
## Set up global settings. Remember to modify the 'participant_name' and 'last_year_..'
nordcancore::set_global_nordcan_settings(
work_dir = dir_result,
participant_name = "Norway", # need to be modified
first_year_incidence = 1953L,
first_year_mortality = 1953L,
first_year_region    = 1953L,
last_year_incidence  = 2020L,
last_year_mortality  = 2020L,
last_year_survival   = 2020L
)
setwd(dir_result)
nordcan_version <-  nordcancore::nordcan_metadata_nordcan_version()
## Show global setting
gns <- nordcancore::get_global_nordcan_settings()
gns[c("participant_name", "work_dir", "survival_work_dir", "iarccrgtools_work_dir",
"first_year_incidence",
"first_year_mortality",
"first_year_prevalence",
"first_year_region",
"first_year_survival",
"last_year_incidence",
"last_year_mortality",
"last_year_survival")]
## Checking whether the directory is empty.
nordcanepistats::dir_check(dir_result, dir_archive)
################################################
## (2) Import raw data into R, and pre-processing
## Read raw data into R.
general_population_size_dataset        <- data.table::fread(file_population)
national_population_life_table         <- data.table::fread(file_lifetable)
unprocessed_cancer_record_dataset      <- data.table::fread(file_incidence)
unprocessed_cancer_death_count_dataset <- data.table::fread(file_mortality)
## Import above saved 'cancer_record_dataset' from disk for saving time.
cancer_record_dataset <- data.table::setDT(readRDS("cancer_record_dataset.rds"))
## process cancer death count
cancer_death_count_dataset <-
nordcanpreprocessing::nordcan_processed_cancer_death_count_dataset(
x = unprocessed_cancer_death_count_dataset
)
## Export undefined ICD version & codes
nordcanepistats::export_undefined()
## Remove data sets which will not be used in further for saving computer's memory.
rm(list = c("unprocessed_cancer_record_dataset","unprocessed_cancer_death_count_dataset")); gc()
##############################################################################
## (3) Generate the NORDCAN statistics tables. This section is time consuming.
## Run one of the following commands (a, b, c) to set what will be calculated.
## a) Run the following line if you *don't* want to calculate survival statistics.
output_objects <- c("session_info",
"cancer_death_count_dataset",
"general_population_size_dataset",
"cancer_record_count_dataset",
"prevalent_patient_count_dataset",
"imp_quality_statistics_dataset" )
statistics <- nordcanepistats::nordcan_statistics_tables(
cancer_record_dataset           = cancer_record_dataset,
general_population_size_dataset = general_population_size_dataset,
national_population_life_table  = national_population_life_table,
cancer_death_count_dataset      = cancer_death_count_dataset,
stata_exe_path = path_STATA,
output_objects = output_objects
)
setwd("P:/Dataflyt/nordcan/dev/nordcan/nordcan_participant_instructions")
##  Install the NORDCAN packages
pkg_paths <- sort(dir(path = "pkgs", pattern = "^pkg_.*.zip$", full.names = TRUE))
pkg_paths
regmatches(pkg_paths, regexpr("pkgs/pkg_^(.*).zip$", pkg_paths))
regexpr("pkgs/pkg_^(.*).zip$", pkg_paths)
regmatches(pkg_paths, regexpr("pkgs\\/pkg_^(.*).zip$", pkg_paths))
regexpr("pkgs\\/pkg_^(.*).zip$", pkg_paths)
regexpr("pkgs.pkg_^(.*).zip$", pkg_paths)
pkg_paths
regexpr(".zip$", pkg_paths)
regexpr("pkg_^(.*).zip$", pkg_paths)
gregexpr("pkg_^(.*).zip$", pkg_paths)
?regmatches()
pkg_paths
regmatches(pkg_paths, gregexpr("pkgs/pkg_^.*.zip$", pkg_paths))
regmatches(pkg_paths, regexpr("pkgs/pkg_^.*.zip$", pkg_paths))
regmatches(pkg_paths, gregexpr("pkgs/pkg_^.*.zip$", pkg_paths))
gregexpr("pkgs/pkg_^.*.zip$", pkg_paths)
pkg_paths
regmatches(pkg_paths, gregexpr("pkgs/pkg_.*?_.*?.zip$", pkg_paths))
regmatches(pkg_paths, gregexpr("pkgs/pkg_.*?_(.*?).zip$", pkg_paths))
gregexpr("pkgs/pkg_.*?_(.*?).zip$", pkg_paths)
regmatches(pkg_paths, regexpr("pkgs/pkg_.*?_(.*?).zip$", pkg_paths))
regmatches(pkg_paths, regexec("pkgs/pkg_.*?_(.*?).zip$", pkg_paths))
regexec("pkgs/pkg_.*?_(.*?).zip$", pkg_paths)
regmatches(pkg_paths, regexec("pkgs/pkg_.*?_(.*?).zip$", pkg_paths))
lapply(regmatches(pkg_paths, regexec("pkgs/pkg_.*?_(.*?).zip$", pkg_paths)), "[", 2)
sapply(regmatches(pkg_paths, regexec("pkgs/pkg_.*?_(.*?).zip$", pkg_paths)), "[", 2)
## (1) Manually specify the path of unzipped installation folder.
path_nordcan <- "path/to/nordcan_participant_instructions"
setwd(path_nordcan)
## (2) Install NORDCAN packages.
pkg_paths <- sort(dir(path = "pkgs", pattern = "^pkg_.*.zip$", full.names = TRUE))
##  Remove installed (old version) NORDCAN packages.
nordcan_pkgs <- sapply(regmatches(pkg_paths, regexec("pkgs/pkg_.*?_(.*?).zip$", pkg_paths)), "[", 2)
remove.packages(nordcan_pkgs)
##  Install the NORDCAN packages
for (pkg_path in pkg_paths) {
clean_pkg_path <- sub("pkg_[0-9]+_", "", pkg_path)
file.copy(pkg_path, clean_pkg_path)
install.packages(clean_pkg_path, repos = NULL, type = "win.binary")
file.remove(clean_pkg_path)
}
##  Remove installed (old version) NORDCAN packages.
nordcan_pkgs <- sapply(regmatches(pkg_paths, regexec("pkgs/pkg_.*?_(.*?).zip$", pkg_paths)), "[", 2)
remove.packages(nordcan_pkgs)
pkg_paths <- sort(dir(path = "pkgs", pattern = "^pkg_.*.zip$", full.names = TRUE))
##  Remove installed (old version) NORDCAN packages.
nordcan_pkgs <- sapply(regmatches(pkg_paths, regexec("pkgs/pkg_.*?_(.*?).zip$", pkg_paths)), "[", 2)
remove.packages(nordcan_pkgs)
##  Install the NORDCAN packages
for (pkg_path in pkg_paths) {
clean_pkg_path <- sub("pkg_[0-9]+_", "", pkg_path)
file.copy(pkg_path, clean_pkg_path)
install.packages(clean_pkg_path, repos = NULL, type = "win.binary")
file.remove(clean_pkg_path)
}
## (3) Verify the installation
all_pkg_nms <- installed.packages()[, 1L]
nordcan_pkg_nms <- all_pkg_nms[grepl("^nordcan", all_pkg_nms)]
## Expected package version (take the version of 'nordcancore' as the expected)
expected_pkg_version <- utils::packageVersion("nordcancore")
print(sprintf("The version of 'nordcancore' is: %s", expected_pkg_version))
## version checking for other NORDCAN packages
for (pkg in nordcan_pkg_nms) {
nordcan_pkg_version <- utils::packageVersion(pkg)
if (nordcan_pkg_version != expected_pkg_version) {
message(sprintf("The version of package '%s' is '%s', but should be '%s'!",
pkg, nordcan_pkg_version, expected_pkg_version))
}
}
pkg_paths <- sort(dir(path = "pkgs", pattern = "^pkg_.*.zip$", full.names = TRUE))
##  Remove installed (old version) NORDCAN packages.
nordcan_pkgs <- sapply(regmatches(pkg_paths, regexec("pkgs/pkg_.*?_(.*?).zip$", pkg_paths)), "[", 2)
remove.packages(nordcan_pkgs)
##  Install the NORDCAN packages
for (pkg_path in pkg_paths) {
clean_pkg_path <- sub("pkg_[0-9]+_", "", pkg_path)
file.copy(pkg_path, clean_pkg_path)
install.packages(clean_pkg_path, repos = NULL, type = "win.binary")
file.remove(clean_pkg_path)
}
pkg_paths <- sort(dir(path = "pkgs", pattern = "^pkg_.*.zip$", full.names = TRUE))
##  Remove installed (old version) NORDCAN packages.
nordcan_pkgs <- sapply(regmatches(pkg_paths, regexec("pkgs/pkg_.*?_(.*?).zip$", pkg_paths)), "[", 2)
remove.packages(nordcan_pkgs)
##  Install the NORDCAN packages
for (pkg_path in pkg_paths) {
clean_pkg_path <- sub("pkg_[0-9]+_", "", pkg_path)
file.copy(pkg_path, clean_pkg_path)
install.packages(clean_pkg_path, repos = NULL, type = "win.binary")
file.remove(clean_pkg_path)
}
##  Install the NORDCAN packages
pkg_paths <- sort(dir(path = "pkgs", pattern = "^pkg_.*.zip$", full.names = TRUE))
for (pkg_path in pkg_paths) {
clean_pkg_path <- sub("pkg_[0-9]+_", "", pkg_path)
file.copy(pkg_path, clean_pkg_path)
install.packages(clean_pkg_path, repos = NULL, type = "win.binary")
file.remove(clean_pkg_path)
}
##  Install the NORDCAN packages
pkg_paths <- sort(dir(path = "pkgs", pattern = "^pkg_.*.zip$", full.names = TRUE))
for (pkg_path in pkg_paths) {
clean_pkg_path <- sub("pkg_[0-9]+_", "", pkg_path)
file.copy(pkg_path, clean_pkg_path)
install.packages(clean_pkg_path, repos = NULL, type = "win.binary")
file.remove(clean_pkg_path)
}
## (
##  Install the NORDCAN packages
pkg_paths <- sort(dir(path = "pkgs", pattern = "^pkg_.*.zip$", full.names = TRUE))
for (pkg_path in pkg_paths) {
clean_pkg_path <- sub("pkg_[0-9]+_", "", pkg_path)
file.copy(pkg_path, clean_pkg_path)
install.packages(clean_pkg_path, repos = NULL, type = "win.binary")
file.remove(clean_pkg_path)
}
## (2) Install NORDCAN packages.
##  Remove installed (old version) NORDCAN packages.
nordcan_pkgs <-  c("nordcancore",
"nordcanepistats",
"nordcanpreprocessing",
"nordcansurvival")
remove.packages(nordcan_pkgs)
##  Install the NORDCAN packages
pkg_paths <- sort(dir(path = "pkgs", pattern = "^pkg_.*.zip$", full.names = TRUE))
for (pkg_path in pkg_paths) {
clean_pkg_path <- sub("pkg_[0-9]+_", "", pkg_path)
file.copy(pkg_path, clean_pkg_path)
install.packages(clean_pkg_path, repos = NULL, type = "win.binary")
file.remove(clean_pkg_path)
}
## (3) Verify the installation
all_pkg_nms <- installed.packages()[, 1L]
nordcan_pkg_nms <- all_pkg_nms[grepl("^nordcan", all_pkg_nms)]
## Expected package version (take the version of 'nordcancore' as the expected)
expected_pkg_version <- utils::packageVersion("nordcancore")
print(sprintf("The version of 'nordcancore' is: %s", expected_pkg_version))
## version checking for other NORDCAN packages
for (pkg in nordcan_pkg_nms) {
nordcan_pkg_version <- utils::packageVersion(pkg)
if (nordcan_pkg_version != expected_pkg_version) {
message(sprintf("The version of package '%s' is '%s', but should be '%s'!",
pkg, nordcan_pkg_version, expected_pkg_version))
}
}
remove.packages("nordcancore", "nordcanpreprocessing", "nordcanepistats", "nordcansurvival")
remove.packages(c("nordcancore", "nordcanpreprocessing", "nordcanepistats", "nordcansurvival"))
remove.packages(c("nordcancore", "nordcanpreprocessing", "nordcanepistats", "nordcansurvival"))
install.packages("/Dataflyt/nordcan/dev/nordcancore_1.3.zip",          repos = NULL, type = "win.binary")
install.packages("/Dataflyt/nordcan/dev/nordcanpreprocessing_1.3.zip", repos = NULL, type = "win.binary")
install.packages("/Dataflyt/nordcan/dev/nordcanepistats_1.3.zip",      repos = NULL, type = "win.binary")
install.packages("/Dataflyt/nordcan/dev/nordcansurvival_1.3.zip",      repos = NULL, type = "win.binary")
stop("Population_projection dataset can only contain varaibles: 'year', 'sex', 'age', 'region', 'pop_midyear'",
names(data_pop_proj) )
stop("Population_projection dataset can only contain varaibles: 'year', 'sex', 'age', 'region', 'pop_midyear'",
names(CO2) )
## (2) Install NORDCAN packages.
##  Remove installed (old version) NORDCAN packages.
nordcan_pkgs <-  c("nordcancore",
"nordcanepistats",
"nordcanpreprocessing",
"nordcansurvival")
remove.packages(nordcan_pkgs)
##  Install the NORDCAN packages
pkg_paths <- sort(dir(path = "pkgs", pattern = "^pkg_.*.zip$", full.names = TRUE))
for (pkg_path in pkg_paths) {
clean_pkg_path <- sub("pkg_[0-9]+_", "", pkg_path)
file.copy(pkg_path, clean_pkg_path)
install.packages(clean_pkg_path, repos = NULL, type = "win.binary")
file.remove(clean_pkg_path)
}
library(nordcancore)
library(nordcanepistats)
library(nordcansurvival)
